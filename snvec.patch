diff --git a/snvec-3.7.5.c b/snvec-3.7.5.c
index 5c792d1..457792f 100644
--- a/snvec-3.7.5.c
+++ b/snvec-3.7.5.c
@@ -206,6 +206,35 @@ for(i=1;i<=n;i++)
 
 free_dvector(cv,1,n);
 
+}
+/*
+ unwrap angle. maps jumps greater than pi to their 2pi complement.
+ this one assumes the in put is in radians already.
+ */
+void unwrap_rad(double *yu, double *y, int n)
+{
+int i;
+double dy,c=0.0,*cv;
+
+cv = dvector(1,n);
+
+/* unwrap */
+cv[1] = 0.0;
+for(i=2;i<=n;i++){
+  dy = (y[i]-y[i-1]);
+    if(dy > PI){
+      c = c - 2.*PI;
+    } else
+	if(dy < -PI){
+      c = c + 2.*PI;
+    }
+  cv[i] = c;
+}
+for(i=1;i<=n;i++)
+  yu[i] = y[i] + cv[i];
+
+free_dvector(cv,1,n);
+
 }
 /*====================== unwrap() END ========================*/
 
@@ -420,9 +449,9 @@ yp[3] += tmp*(nn[3][m] - dotab*s[3]);
  */
 void driver(int argc, char **argv)
 {
-int i,k,m,lt;	
-double t0,tfin,tfink,sckx,*nv,*y0,*u,*up,*epl,*phi,tmp,**nni,dx;
-double *eei,*inci,*lphi,*lphu,*lani,*lanu,*cp;
+int i,k,m,lt;
+double t0,tfin,tfink,sckx,*nv,*y0,*u,*up,*epl,*phi,*phiu,tmp,**nni,dx;
+double *eei,*inci,*lphi,*lphu,*lani,*lanu,*lpx,*cp;
 double argd[4],tend,ed,td;
 char dir[BUFSIZ],foo[BUFSIZ],mssg[BUFSIZ];
 FILE *fpout;
@@ -502,11 +531,12 @@ hmin  = 0.0;
 /* allocate */
 nv  = dvector(1,3); /* nvec, single row of nn */
 y0  = dvector(1,3);
-u   = dvector(1,3); 
-up  = dvector(1,3); 
-epl = dvector(1,kmax); 
-phi = dvector(1,kmax); 
-tmv = dvector(1,kmax); 
+u   = dvector(1,3);
+up  = dvector(1,3);
+epl = dvector(1,kmax);
+phi = dvector(1,kmax);
+phiu = dvector(1,kmax);
+tmv = dvector(1,kmax);
 yy  = dmatrix(1,NEQ,1,kmax);
 nni = dmatrix(1,NEQ,1,kmax);
 eei  = dvector(1,kmax);
@@ -515,6 +545,7 @@ lphi = dvector(1,kmax);
 lani = dvector(1,kmax);
 lphu = dvector(1,ls);   /* 1,ls! lphu = unwrap(lph) */
 lanu = dvector(1,ls);   /* 1,ls! lanu = unwrap(lan) */
+lpx  = dvector(1,kmax); /* longitude of perihelion from the moving equinox */
 cp   = dvector(1,kmax); /* climatic precession      */
 
 /* start values */
@@ -585,10 +616,13 @@ for(i=1;i<=kount;i++){
   euler(up,up,0.0,-(lani[i]+OMT)/R2D+PI/2.,0);
   phi[i] = atan2(up[2],up[1]);
 }
-tmp = phi[1];	
+unwrap_rad(phiu,phi,kount);
+
+tmp = phi[1];
 for(i=1;i<=kount;i++){
   phi[i] -= tmp;
-   cp[i]  = eei[i]*sin((lphi[i]+OMT)/R2D - phi[i]);
+  lpx[i] = (lphi[i]+OMT)/R2D - phiu[i];
+   cp[i]  = eei[i]*sin(lpx[i]);
 }
 
 printf("\n@ Final values obliquity, precession (rad):\n");
@@ -605,9 +639,11 @@ for(i=1;i<=kount;i++){
  for(k=1;k<=NEQ;k++)
   fprintf(fpout,frmt,yy[k][i]);
  }
- //fprintf(fpout,frmt,eei[i]);
+ fprintf(fpout,frmt,eei[i]);
  fprintf(fpout,frmt,epl[i]);
  fprintf(fpout,frmt,phi[i]);
+ /* fprintf(fpout,frmt,phiu[i]); */
+ fprintf(fpout,frmt,lpx[i]);
  fprintf(fpout,frmt,cp[i]);
  //fprintf(fpout,frmt,lani[i]);
  fprintf(fpout,"\n");
@@ -621,8 +657,10 @@ printf("\n@ Writing binary output\n");
 fpout = fopen("out.bin","wb");
 fwrite(&kount,sizeof(int),1,fpout);
 fwrite(tmv+1,sizeof(tmv),kount,fpout);
+fwrite(eei+1,sizeof(eei),kount,fpout);
 fwrite(epl+1,sizeof(epl),kount,fpout);
 fwrite(phi+1,sizeof(phi),kount,fpout);
+fwrite(lpx+1,sizeof(lpx),kount,fpout);
 fwrite( cp+1,sizeof(cp) ,kount,fpout);
 fclose(fpout);
 }
@@ -648,6 +686,7 @@ free_dvector(u,1,3);
 free_dvector(up,1,3);
 free_dvector(epl,1,kmax);
 free_dvector(phi,1,kmax);
+free_dvector(phiu,1,kmax);
 free_dvector(tmv,1,kmax);
 free_dmatrix(yy,1,NEQ,1,kmax);
 free_dmatrix(nni,1,NEQ,1,kmax);
@@ -655,6 +694,7 @@ free_dvector(eei,1,kmax);
 free_dvector(inci,1,kmax);
 free_dvector(lphi,1,kmax);
 free_dvector(lani,1,kmax);
+free_dvector(lpx,1,kmax);
 free_dvector(lphu,1,ls);
 free_dvector(lanu,1,ls);
 free_dvector(cp,1,kmax);
